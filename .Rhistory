suppressWarnings(p)
}
plot_assoc_linear_test(b,plot_type="dotplot")
plot_assoc_linear_test(b)
b <- calc_assoc(iris,"Species")
plot_assoc_linear_test <- function(assoc,
pair_order = "default",
plot_type = c("heatmap","dotplot"),
limits=c(-1,1)){
plot_type = match.arg(plot_type)
# defining a grouping variable vector depedning on class of assoc
if(class(assoc)[1]=="pairwise"){
group_var <- NULL
} else if(class(assoc)[1]=="cond_pairwise"){
group_var <- "by"
} else if(class(assoc)[1]=="multi_pairwise") {
group_var <- "measure_type"
} else {
stop("'assoc' must be of class pairwise, cond_pairwise or multi_pairwise")
}
if (isTRUE(pair_order == "default")){
assoc$z <- paste0(assoc$x, sep=":", assoc$y)
assoc <- dplyr::arrange(assoc,dplyr::desc(abs(.data$measure)))
assoc$z <- forcats::fct_inorder(assoc$z)
assoc$by <- forcats::fct_inorder(assoc$by) # may remove
} else {
if ("by" %in% names(assoc)){
assoc <- assoc |>
dplyr::group_by(.data$x,.data$y) |>
dplyr::summarize(.data$measure,.data$measure_type,.data$by,max_diff = max(.data$measure, na.rm=TRUE) - min(.data$measure, na.rm=TRUE),.groups = 'drop')
assoc$z <- paste0(assoc$x, sep=":", assoc$y)
assoc <- dplyr::arrange(assoc,.data$max_diff)
assoc$z <- forcats::fct_inorder(assoc$z)
} else{
assoc$z <- paste0(assoc$x, sep=":", assoc$y)
pair_order <- assoc |> dplyr::group_by(.data$z) |>
dplyr::summarise(max_diff=diff(range(abs(.data$measure)))) |>
dplyr::arrange(.data$max_diff) |> dplyr::pull(.data$z)
assoc$z <- factor(assoc$z,levels = pair_order)
}
}
if (is.null(limits)) {
limits <- range(.data$lassoc$measure, na.rm=TRUE)
limits <- range(labeling::rpretty(limits[1], limits[2]))
}
p <- ggplot2::ggplot(assoc) +
ggplot2::theme(legend.position = "top",
axis.title.y  = ggplot2::element_blank())
by_var <- attr(assoc,"by_var")
if (plot_type == "heatmap"){
p <- p +
{if(is.null(group_var)) ggplot2::geom_tile(ggplot2::aes(x=.data[["measure_type"]],y=.data[["z"]],fill=.data[["measure"]]))} +
{if(!is.null(group_var)) ggplot2::geom_tile(ggplot2::aes(x=.data[[group_var]],y=.data[["z"]],fill=.data[["measure"]]))} +
ggplot2::scale_fill_gradient2(low="blue", mid="white", high="brown",na.value="grey95",limits=limits) +
ggplot2::scale_x_discrete(position = "top") +
{if(pair_order=="default") ggplot2::scale_y_discrete(limits=rev)} +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.text.x = ggplot2::element_text(angle = 45, hjust = 0, vjust = 0),
axis.text = ggplot2::element_text(size = 8),
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
panel.background = ggplot2::element_rect(fill = "grey95"))
} else {
p <- p +
ggplot2::geom_hline(yintercept = 0) +
{if(is.null(group_var)) ggplot2::geom_point(ggplot2::aes(x=.data[["z"]],y=.data[["measure"]],colour=.data[["measure_type"]]))} +
{if(!is.null(group_var)) ggplot2::geom_point(ggplot2::aes(x=.data[["z"]],y=.data[["measure"]],colour=.data[[group_var]]))} +
ggplot2::ylim(limits[1],limits[2]) +
ggplot2::coord_flip() +
ggplot2::scale_x_discrete(limits=rev) +
ggplot2::labs(colour = by_var)
}
suppressWarnings(p)
}
plot_assoc_linear_test(b)
plot_assoc_linear_test(b,plot_type="dotplot")
plot_assoc_linear_test <- function(assoc,
pair_order = "default",
plot_type = c("heatmap","dotplot"),
limits=c(-1,1)){
plot_type = match.arg(plot_type)
# defining a grouping variable vector depedning on class of assoc
if(class(assoc)[1]=="pairwise"){
group_var <- NULL
} else if(class(assoc)[1]=="cond_pairwise"){
group_var <- "by"
} else if(class(assoc)[1]=="multi_pairwise") {
group_var <- "measure_type"
} else {
stop("'assoc' must be of class pairwise, cond_pairwise or multi_pairwise")
}
if (isTRUE(pair_order == "default")){
assoc$z <- paste0(assoc$x, sep=":", assoc$y)
assoc <- dplyr::arrange(assoc,dplyr::desc(abs(.data$measure)))
assoc$z <- forcats::fct_inorder(assoc$z)
#assoc$by <- forcats::fct_inorder(assoc$by) # may remove
} else {
if ("by" %in% names(assoc)){
assoc <- assoc |>
dplyr::group_by(.data$x,.data$y) |>
dplyr::summarize(.data$measure,.data$measure_type,.data$by,max_diff = max(.data$measure, na.rm=TRUE) - min(.data$measure, na.rm=TRUE),.groups = 'drop')
assoc$z <- paste0(assoc$x, sep=":", assoc$y)
assoc <- dplyr::arrange(assoc,.data$max_diff)
assoc$z <- forcats::fct_inorder(assoc$z)
} else{
assoc$z <- paste0(assoc$x, sep=":", assoc$y)
pair_order <- assoc |> dplyr::group_by(.data$z) |>
dplyr::summarise(max_diff=diff(range(abs(.data$measure)))) |>
dplyr::arrange(.data$max_diff) |> dplyr::pull(.data$z)
assoc$z <- factor(assoc$z,levels = pair_order)
}
}
if (is.null(limits)) {
limits <- range(.data$lassoc$measure, na.rm=TRUE)
limits <- range(labeling::rpretty(limits[1], limits[2]))
}
p <- ggplot2::ggplot(assoc) +
ggplot2::theme(legend.position = "top",
axis.title.y  = ggplot2::element_blank())
by_var <- attr(assoc,"by_var")
if (plot_type == "heatmap"){
p <- p +
{if(is.null(group_var)) ggplot2::geom_tile(ggplot2::aes(x=.data[["measure_type"]],y=.data[["z"]],fill=.data[["measure"]]))} +
{if(!is.null(group_var)) ggplot2::geom_tile(ggplot2::aes(x=.data[[group_var]],y=.data[["z"]],fill=.data[["measure"]]))} +
ggplot2::scale_fill_gradient2(low="blue", mid="white", high="brown",na.value="grey95",limits=limits) +
ggplot2::scale_x_discrete(position = "top") +
{if(pair_order=="default") ggplot2::scale_y_discrete(limits=rev)} +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.text.x = ggplot2::element_text(angle = 45, hjust = 0, vjust = 0),
axis.text = ggplot2::element_text(size = 8),
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
panel.background = ggplot2::element_rect(fill = "grey95"))
} else {
p <- p +
ggplot2::geom_hline(yintercept = 0) +
{if(is.null(group_var)) ggplot2::geom_point(ggplot2::aes(x=.data[["z"]],y=.data[["measure"]],colour=.data[["measure_type"]]))} +
{if(!is.null(group_var)) ggplot2::geom_point(ggplot2::aes(x=.data[["z"]],y=.data[["measure"]],colour=.data[[group_var]]))} +
ggplot2::ylim(limits[1],limits[2]) +
ggplot2::coord_flip() +
ggplot2::scale_x_discrete(limits=rev) +
ggplot2::labs(colour = by_var)
}
suppressWarnings(p)
}
plot_assoc_linear_test(b)
plot_assoc_linear_test(b,plot_type="dotplot")
plot_assoc_linear_test(b, pair_order = "max_diff")
plot_assoc_linear_test(b,plot_type="dotplot",pair_order = "max_diff" )
plot_assoc_linear_test <- function(assoc,
pair_order = "default",
plot_type = c("heatmap","dotplot"),
limits=c(-1,1)){
plot_type = match.arg(plot_type)
# defining a grouping variable vector depedning on class of assoc
if(class(assoc)[1]=="pairwise"){
group_var <- NULL
} else if(class(assoc)[1]=="cond_pairwise"){
group_var <- "by"
} else if(class(assoc)[1]=="multi_pairwise") {
group_var <- "measure_type"
} else {
stop("'assoc' must be of class pairwise, cond_pairwise or multi_pairwise")
}
if (isTRUE(pair_order == "default")){
assoc$z <- paste0(assoc$x, sep=":", assoc$y)
assoc <- dplyr::arrange(assoc,dplyr::desc(abs(.data$measure)))
assoc$z <- forcats::fct_inorder(assoc$z)
#assoc$by <- forcats::fct_inorder(assoc$by) # may remove
} else {
if ("by" %in% names(assoc)){
assoc <- assoc |>
dplyr::group_by(.data$x,.data$y) |>
dplyr::summarize(.data$measure,.data$measure_type,.data$by,max_diff = max(.data$measure, na.rm=TRUE) - min(.data$measure, na.rm=TRUE),.groups = 'drop')
assoc$z <- paste0(assoc$x, sep=":", assoc$y)
assoc <- dplyr::arrange(assoc,.data$max_diff)
assoc$z <- forcats::fct_inorder(assoc$z)
} else{
assoc$z <- paste0(assoc$x, sep=":", assoc$y)
pair_order <- assoc |> dplyr::group_by(.data$z) |>
dplyr::summarise(max_diff=diff(range(abs(.data$measure)))) |>
dplyr::arrange(.data$max_diff) |> dplyr::pull(.data$z)
assoc$z <- factor(assoc$z,levels = pair_order)
}
}
if (is.null(limits)) {
limits <- range(.data$lassoc$measure, na.rm=TRUE)
limits <- range(labeling::rpretty(limits[1], limits[2]))
}
p <- ggplot2::ggplot(assoc) +
ggplot2::theme(legend.position = "top",
axis.title.y  = ggplot2::element_blank())
by_var <- attr(assoc,"by_var")
if (plot_type == "heatmap"){
p <- p +
{if(is.null(group_var)) ggplot2::geom_tile(ggplot2::aes(x=.data[["measure_type"]],y=.data[["z"]],fill=.data[["measure"]]))} +
{if(!is.null(group_var)) ggplot2::geom_tile(ggplot2::aes(x=.data[[group_var]],y=.data[["z"]],fill=.data[["measure"]]))} +
ggplot2::scale_fill_gradient2(low="blue", mid="white", high="brown",na.value="grey95",limits=limits) +
ggplot2::scale_x_discrete(position = "top") +
{if(pair_order=="default") ggplot2::scale_y_discrete(limits=rev)} +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.text.x = ggplot2::element_text(angle = 45, hjust = 0, vjust = 0),
axis.text = ggplot2::element_text(size = 8),
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
panel.background = ggplot2::element_rect(fill = "grey95"))
} else {
p <- p +
ggplot2::geom_hline(yintercept = 0) +
{if(is.null(group_var)) ggplot2::geom_point(ggplot2::aes(x=.data[["z"]],y=.data[["measure"]],colour=.data[["measure_type"]]))} +
{if(!is.null(group_var)) ggplot2::geom_point(ggplot2::aes(x=.data[["z"]],y=.data[["measure"]],colour=.data[[group_var]]))} +
ggplot2::ylim(limits[1],limits[2]) +
ggplot2::coord_flip() +
{if(pair_order=="default") ggplot2::scale_x_discrete(limits=rev)} +
ggplot2::labs(colour = by_var)
}
suppressWarnings(p)
}
plot_assoc_linear_test(b,plot_type="dotplot",pair_order = "max_diff" )
plot_assoc_linear_test(a)
plot_assoc_linear_test(a,plot_type="dotplot")
c <- calc_assoc_all(iris)
plot_assoc_linear_test(c)
plot_assoc_linear_test(c,plot_type="dotplot")
plot_assoc_linear_test(c, pair_order = "max_diff")
plot_assoc_linear_test(c,plot_type="dotplot",pair_order = "max_diff" )
plot_assoc_linear_test <- function(assoc,
pair_order = "default",
plot_type = c("heatmap","dotplot"),
limits=c(-1,1)){
plot_type = match.arg(plot_type)
# defining a grouping variable vector depedning on class of assoc
if(class(assoc)[1]=="pairwise"){
group_var <- NULL
} else if(class(assoc)[1]=="cond_pairwise"){
group_var <- "by"
} else if(class(assoc)[1]=="multi_pairwise") {
group_var <- "measure_type"
} else {
stop("'assoc' must be of class pairwise, cond_pairwise or multi_pairwise")
}
if (isTRUE(pair_order == "default")){
assoc$z <- paste0(assoc$x, sep=":", assoc$y)
assoc <- dplyr::arrange(assoc,dplyr::desc(abs(.data$measure)))
assoc$z <- forcats::fct_inorder(assoc$z)
#assoc$by <- forcats::fct_inorder(assoc$by) # may remove
} else {
if ("by" %in% names(assoc)){
assoc <- assoc |>
dplyr::group_by(.data$x,.data$y) |>
dplyr::summarize(.data$measure,.data$measure_type,.data$by,max_diff = max(.data$measure, na.rm=TRUE) - min(.data$measure, na.rm=TRUE),.groups = 'drop')
assoc$z <- paste0(assoc$x, sep=":", assoc$y)
assoc <- dplyr::arrange(assoc,.data$max_diff)
assoc$z <- forcats::fct_inorder(assoc$z)
} else{
assoc$z <- paste0(assoc$x, sep=":", assoc$y)
pair_order <- assoc |> dplyr::group_by(.data$z) |>
dplyr::summarise(max_diff=diff(range(abs(.data$measure)))) |>
dplyr::arrange(.data$max_diff) |> dplyr::pull(.data$z)
assoc$z <- factor(assoc$z,levels = pair_order)
}
}
if (is.null(limits)) {
limits <- range(.data$lassoc$measure, na.rm=TRUE)
limits <- range(labeling::rpretty(limits[1], limits[2]))
}
p <- ggplot2::ggplot(assoc) +
ggplot2::theme(legend.position = "top",
axis.title.y  = ggplot2::element_blank())
by_var <- attr(assoc,"by_var")
if (plot_type == "heatmap"){
p <- p +
{if(is.null(group_var)) ggplot2::geom_tile(ggplot2::aes(x=.data[["measure_type"]],y=.data[["z"]],fill=.data[["measure"]]))} +
{if(!is.null(group_var)) ggplot2::geom_tile(ggplot2::aes(x=.data[[group_var]],y=.data[["z"]],fill=.data[["measure"]]))} +
ggplot2::scale_fill_gradient2(low="blue", mid="white", high="brown",na.value="grey95",limits=limits) +
ggplot2::scale_x_discrete(position = "top") +
{if(pair_order=="default") ggplot2::scale_y_discrete(limits=rev)} +
{if(pair_order=="max_diff") ggplot2::scale_y_discrete()} +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.text.x = ggplot2::element_text(angle = 45, hjust = 0, vjust = 0),
axis.text = ggplot2::element_text(size = 8),
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
panel.background = ggplot2::element_rect(fill = "grey95"))
} else {
p <- p +
ggplot2::geom_hline(yintercept = 0) +
{if(is.null(group_var)) ggplot2::geom_point(ggplot2::aes(x=.data[["z"]],y=.data[["measure"]],colour=.data[["measure_type"]]))} +
{if(!is.null(group_var)) ggplot2::geom_point(ggplot2::aes(x=.data[["z"]],y=.data[["measure"]],colour=.data[[group_var]]))} +
ggplot2::ylim(limits[1],limits[2]) +
ggplot2::coord_flip() +
{if(pair_order=="default") ggplot2::scale_x_discrete(limits=rev)} +
{if(pair_order=="max_diff") ggplot2::scale_x_discrete()}
ggplot2::labs(colour = by_var)
}
suppressWarnings(p)
}
plot_assoc_linear_test <- function(assoc,
pair_order = "default",
plot_type = c("heatmap","dotplot"),
limits=c(-1,1)){
plot_type = match.arg(plot_type)
# defining a grouping variable vector depedning on class of assoc
if(class(assoc)[1]=="pairwise"){
group_var <- NULL
} else if(class(assoc)[1]=="cond_pairwise"){
group_var <- "by"
} else if(class(assoc)[1]=="multi_pairwise") {
group_var <- "measure_type"
} else {
stop("'assoc' must be of class pairwise, cond_pairwise or multi_pairwise")
}
if (isTRUE(pair_order == "default")){
assoc$z <- paste0(assoc$x, sep=":", assoc$y)
assoc <- dplyr::arrange(assoc,dplyr::desc(abs(.data$measure)))
assoc$z <- forcats::fct_inorder(assoc$z)
#assoc$by <- forcats::fct_inorder(assoc$by) # may remove
} else {
if ("by" %in% names(assoc)){
assoc <- assoc |>
dplyr::group_by(.data$x,.data$y) |>
dplyr::summarize(.data$measure,.data$measure_type,.data$by,max_diff = max(.data$measure, na.rm=TRUE) - min(.data$measure, na.rm=TRUE),.groups = 'drop')
assoc$z <- paste0(assoc$x, sep=":", assoc$y)
assoc <- dplyr::arrange(assoc,.data$max_diff)
assoc$z <- forcats::fct_inorder(assoc$z)
} else{
assoc$z <- paste0(assoc$x, sep=":", assoc$y)
pair_order <- assoc |> dplyr::group_by(.data$z) |>
dplyr::summarise(max_diff=diff(range(abs(.data$measure)))) |>
dplyr::arrange(.data$max_diff) |> dplyr::pull(.data$z)
assoc$z <- factor(assoc$z,levels = pair_order)
}
}
if (is.null(limits)) {
limits <- range(.data$lassoc$measure, na.rm=TRUE)
limits <- range(labeling::rpretty(limits[1], limits[2]))
}
p <- ggplot2::ggplot(assoc) +
ggplot2::theme(legend.position = "top",
axis.title.y  = ggplot2::element_blank())
by_var <- attr(assoc,"by_var")
if (plot_type == "heatmap"){
p <- p +
{if(is.null(group_var)) ggplot2::geom_tile(ggplot2::aes(x=.data[["measure_type"]],y=.data[["z"]],fill=.data[["measure"]]))} +
{if(!is.null(group_var)) ggplot2::geom_tile(ggplot2::aes(x=.data[[group_var]],y=.data[["z"]],fill=.data[["measure"]]))} +
ggplot2::scale_fill_gradient2(low="blue", mid="white", high="brown",na.value="grey95",limits=limits) +
ggplot2::scale_x_discrete(position = "top") +
{if(pair_order=="default") ggplot2::scale_y_discrete(limits=rev)} +
{if(pair_order=="max_diff") ggplot2::scale_y_discrete()} +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.text.x = ggplot2::element_text(angle = 45, hjust = 0, vjust = 0),
axis.text = ggplot2::element_text(size = 8),
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
panel.background = ggplot2::element_rect(fill = "grey95"))
} else {
p <- p +
ggplot2::geom_hline(yintercept = 0) +
{if(is.null(group_var)) ggplot2::geom_point(ggplot2::aes(x=.data[["z"]],y=.data[["measure"]],colour=.data[["measure_type"]]))} +
{if(!is.null(group_var)) ggplot2::geom_point(ggplot2::aes(x=.data[["z"]],y=.data[["measure"]],colour=.data[[group_var]]))} +
ggplot2::ylim(limits[1],limits[2]) +
ggplot2::coord_flip() +
{if(pair_order=="default") ggplot2::scale_x_discrete(limits=rev)} +
{if(pair_order=="max_diff") ggplot2::scale_x_discrete()} +
ggplot2::labs(colour = by_var)
}
suppressWarnings(p)
}
plot_assoc_linear_test(c, pair_order = "max_diff")
pair_order="default"
pair_order=="default"
plot_assoc_linear_test <- function(assoc,
pair_order = "default",
plot_type = c("heatmap","dotplot"),
limits=c(-1,1)){
plot_type = match.arg(plot_type)
# defining a grouping variable vector depedning on class of assoc
if(class(assoc)[1]=="pairwise"){
group_var <- NULL
} else if(class(assoc)[1]=="cond_pairwise"){
group_var <- "by"
} else if(class(assoc)[1]=="multi_pairwise") {
group_var <- "measure_type"
} else {
stop("'assoc' must be of class pairwise, cond_pairwise or multi_pairwise")
}
if (isTRUE(pair_order == "default")){
assoc$z <- paste0(assoc$x, sep=":", assoc$y)
assoc <- dplyr::arrange(assoc,dplyr::desc(abs(.data$measure)))
assoc$z <- forcats::fct_inorder(assoc$z)
#assoc$by <- forcats::fct_inorder(assoc$by) # may remove
} else {
if ("by" %in% names(assoc)){
assoc <- assoc |>
dplyr::group_by(.data$x,.data$y) |>
dplyr::summarize(.data$measure,.data$measure_type,.data$by,max_diff = max(.data$measure, na.rm=TRUE) - min(.data$measure, na.rm=TRUE),.groups = 'drop')
assoc$z <- paste0(assoc$x, sep=":", assoc$y)
assoc <- dplyr::arrange(assoc,.data$max_diff)
assoc$z <- forcats::fct_inorder(assoc$z)
} else{
assoc$z <- paste0(assoc$x, sep=":", assoc$y)
pair_order_m <- assoc |> dplyr::group_by(.data$z) |>
dplyr::summarise(max_diff=diff(range(abs(.data$measure)))) |>
dplyr::arrange(.data$max_diff) |> dplyr::pull(.data$z)
assoc$z <- factor(assoc$z,levels = pair_order_m)
}
}
if (is.null(limits)) {
limits <- range(.data$lassoc$measure, na.rm=TRUE)
limits <- range(labeling::rpretty(limits[1], limits[2]))
}
p <- ggplot2::ggplot(assoc) +
ggplot2::theme(legend.position = "top",
axis.title.y  = ggplot2::element_blank())
by_var <- attr(assoc,"by_var")
if (plot_type == "heatmap"){
p <- p +
{if(is.null(group_var)) ggplot2::geom_tile(ggplot2::aes(x=.data[["measure_type"]],y=.data[["z"]],fill=.data[["measure"]]))} +
{if(!is.null(group_var)) ggplot2::geom_tile(ggplot2::aes(x=.data[[group_var]],y=.data[["z"]],fill=.data[["measure"]]))} +
ggplot2::scale_fill_gradient2(low="blue", mid="white", high="brown",na.value="grey95",limits=limits) +
ggplot2::scale_x_discrete(position = "top") +
{if(pair_order=="default") ggplot2::scale_y_discrete(limits=rev)} +
ggplot2::theme(axis.title.x = ggplot2::element_blank(),
axis.text.x = ggplot2::element_text(angle = 45, hjust = 0, vjust = 0),
axis.text = ggplot2::element_text(size = 8),
panel.grid.major = ggplot2::element_blank(),
panel.grid.minor = ggplot2::element_blank(),
panel.background = ggplot2::element_rect(fill = "grey95"))
} else {
p <- p +
ggplot2::geom_hline(yintercept = 0) +
{if(is.null(group_var)) ggplot2::geom_point(ggplot2::aes(x=.data[["z"]],y=.data[["measure"]],colour=.data[["measure_type"]]))} +
{if(!is.null(group_var)) ggplot2::geom_point(ggplot2::aes(x=.data[["z"]],y=.data[["measure"]],colour=.data[[group_var]]))} +
ggplot2::ylim(limits[1],limits[2]) +
ggplot2::coord_flip() +
{if(pair_order=="default") ggplot2::scale_x_discrete(limits=rev)} +
ggplot2::labs(colour = by_var)
}
suppressWarnings(p)
}
plot_assoc_linear_test(c, pair_order = "max_diff")
plot_assoc_linear_test(c,plot_type="dotplot",pair_order = "max_diff" )
order_assoc_lollipop_test <- function(assoc, group_var = group_var){
assoc <- assoc |>
tidyr::pivot_wider(id_cols = 1:2,names_from = group_var, values_from = "measure")
if (group_var=="by"){
assoc <- dplyr::select(assoc,-x,-y,-overall)
} else{
assoc <- dplyr::select(assoc,-x,-y)
}
lollipop_m <- stats::cor(assoc, use = "pairwise.complete.obs")
# if (group_var=="measure_type"){
#   lollipop_m <- assoc |>
#     tidyr::pivot_wider(id_cols = 1:2,names_from = "measure_type", values_from = "measure") |>
#     dplyr::select(-x,-y) |>
#     stats::cor(use = "pairwise.complete.obs")
# } else if (group_var=="by"){
#   lollipop_m <- assoc |>
#     tidyr::pivot_wider(id_cols = 1:2,names_from = "by", values_from = "measure") |>
#     dplyr::select(-x,-y,-overall) |>
#     stats::cor(use = "pairwise.complete.obs")
# }
if (nrow(lollipop_m)==2){
lollipop_o <- rownames(lollipop_m)[c(1,2)]
} else {
lollipop_o <- DendSer::dser(x = as.dist(-abs(lollipop_m)), cost = DendSer::costLPL)
}
rownames(lollipop_m)[lollipop_o]
}
order_assoc_lollipop_test(b)
order_assoc_lollipop_test(b,"by")
order_assoc_lollipop_test(c,"measure_type")
build_site_github_pages(
pkg = "~\corVis",
...,
dest_dir = "docs",
clean = TRUE,
install = FALSE,
new_process = FALSE
)
build_site_github_pages(
pkg = "~\corVis",
dest_dir = "docs",
clean = TRUE,
install = FALSE,
new_process = FALSE
)
build_site_github_pages(
pkg = "~/corVis",
dest_dir = "docs",
clean = TRUE,
install = FALSE,
new_process = FALSE
)
build_site_github_pages(
pkg = "~/corVis",
dest_dir = "docs",
clean = TRUE,
install = FALSE,
new_process = FALSE
)
build_site_github_pages(
pkg = "~/corVis",
dest_dir = "docs",
clean = TRUE,
install = FALSE,
new_process = FALSE
)
document()
usethis::use_pkgdown_github_pages()
document()
system('echo $GITHUB_TOKEN')
