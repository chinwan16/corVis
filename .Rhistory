ggplot(iris) + geom_point(aes(x="Sepal.Length",y="Petal.Length"))
install.packages("ggmosaic")
select(iris,which(is.numeric()))
select(iris,which(is.numeric)
select(iris,which(is.numeric))
select(iris,where(is.numeric))
show_assoc <- function(d, x, y, by = NULL){
if ( is.numeric(d[[x]]) & is.numeric(d[[y]]) ) {
p <- ggplot2::ggplot(data=d) +
ggplot2::geom_point(ggplot2::aes(x = .data$x, y = .data$y)) + xlab(x) + ylab(y) +
{if(!is.null(by)) ggplot2::facet_wrap(~.data$by)}
} else if ( is.factor(d[[x]]) & is.factor(d[[y]]) ) {
p <- ggplot2::ggplot(data=d) +
ggmosaic::geom_mosaic(ggplot2::aes(x = ggmosaic::product(.data$x, .data$y) )) + xlab(x) +
ylab(y) + {if(!is.null(by)) ggplot2::facet_wrap(~.data$by)}
} else {
p <- ggplot2::ggplot(data=d) +
ggplot2::geom_boxplot(ggplot2::aes(x =.data$x, y =.data$y) ) + xlab(x) +
ylab(y) + {if(!is.null(by)) ggplot2::facet_wrap(~.data$by)}
}
print(p)
}
show_assoc(iris,"Petal.Length","Sepal.Length")
show_assoc <- function(d, x, y, by = NULL){
if ( is.numeric(d[[x]]) & is.numeric(d[[y]]) ) {
p <- ggplot2::ggplot(data=d) +
ggplot2::geom_point(ggplot2::aes(x = .data[[x]], y = .data[[y]])) + xlab(x) + ylab(y) +
{if(!is.null(by)) ggplot2::facet_wrap(~.data[[by]])}
} else if ( is.factor(d[[x]]) & is.factor(d[[y]]) ) {
p <- ggplot2::ggplot(data=d) +
ggmosaic::geom_mosaic(ggplot2::aes(x = ggmosaic::product(.data[[x]], .data[[y]]) )) + xlab(x) +
ylab(y) + {if(!is.null(by)) ggplot2::facet_wrap(~.data[[by]])}
} else {
p <- ggplot2::ggplot(data=d) +
ggplot2::geom_boxplot(ggplot2::aes(x =.data[[x]], y =.data[[y]]) ) + xlab(x) +
ylab(y) + {if(!is.null(by)) ggplot2::facet_wrap(~.data[[by]])}
}
print(p)
}
show_assoc(iris,"Petal.Length","Sepal.Length")
show_assoc(iris,"Petal.Length","Species")
show_assoc(iris,y="Petal.Length",x="Species")
library()
library(palmerpenguins)
names(penguins)
show_assoc(penguins,"species","island")
show_assoc <- function(d, x, y, by = NULL){
if ( is.numeric(d[[x]]) & is.numeric(d[[y]]) ) {
p <- ggplot2::ggplot(data=d) +
ggplot2::geom_point(ggplot2::aes(x = .data[[x]], y = .data[[y]])) + xlab(x) + ylab(y) +
{if(!is.null(by)) ggplot2::facet_wrap(~.data[[by]])}
} else if ( is.factor(d[[x]]) & is.factor(d[[y]]) ) {
p <- ggplot2::ggplot(data=d) +
ggmosaic::geom_mosaic(ggplot2::aes(x = ggmosaic::product(.data[[x]], .data[[y]]), fill= .data[[x]] )) +
xlab(x) + ylab(y) + {if(!is.null(by)) ggplot2::facet_wrap(~.data[[by]])}
} else {
p <- ggplot2::ggplot(data=d) +
ggplot2::geom_boxplot(ggplot2::aes(x =.data[[x]], y =.data[[y]]) ) + xlab(x) +
ylab(y) + {if(!is.null(by)) ggplot2::facet_wrap(~.data[[by]])}
}
print(p)
}
show_assoc(penguins,"species","island")
ggplot2::ggplot(data=penguins) +
ggmosaic::geom_mosaic(ggplot2::aes(x = ggmosaic::product(species, island), fill= island ))
ggplot2::ggplot(data=penguins) +
ggmosaic::geom_mosaic(ggplot2::aes(x = ggmosaic::product(species, sex), fill= sex ))
ggplot(data = flights) +
geom_mosaic(aes(x = product(rude_to_recline), fill=rude_to_recline)) +
labs(title='f(rude_to_recline)')
library(ggmosaic)
ggplot(data = flights) +
geom_mosaic(aes(x = product(rude_to_recline), fill=rude_to_recline)) +
labs(title='f(rude_to_recline)')
data("flights")
ggplot(data = fly) +
geom_mosaic(aes(x = product(rude_to_recline), fill=rude_to_recline)) +
labs(title='f(rude_to_recline)')
fly$rude_to_recline
penguins$species
penguins$island
ggplot2::ggplot(data=penguins) +
ggmosaic::geom_mosaic(ggplot2::aes(x = ggmosaic::product(sex), fill= sex ))
ggplot2::ggplot(data=penguins) +
ggmosaic::geom_mosaic(ggplot2::aes(x = ggmosaic::product(sex,island), fill= sex ))
ggplot2::ggplot(data=penguins) +
ggmosaic::geom_mosaic(ggplot2::aes(x = ggmosaic::product(island,sex), fill= sex ))
show_assoc(penguins,"island","species")
ggplot2::ggplot(data=penguins) +
ggmosaic::geom_mosaic(ggplot2::aes(x = ggmosaic::product("island","sex"), fill= "sex" ))
ggplot2::ggplot(data=penguins) +
ggmosaic::geom_mosaic(ggplot2::aes(x = ggmosaic::product("island","sex"), fill= sex ))
ggplot2::ggplot(data=penguins) +
ggmosaic::geom_mosaic(ggplot2::aes(x = ggmosaic::product("island","sex"), fill= penguins[["sex"]] ))
ggplot2::ggplot(data=penguins) +
ggmosaic::geom_mosaic(ggplot2::aes(x = ggmosaic::product(.data[["island"]],.data[["sex"]]), fill= .data[["sex"]] ))
?product
?assoc_tibble
install.packages("condvis2")
library(condvis2)
?CVpredict
library(devtools)
document()
rm(tbl_gkGamma)
rm(tbl_polycor)
document()
check()
document()
check()
library(corVis)
?assoc_tibble
?tbl_polycor
?polychor
?KendallTauA
?UncertCoef
UncertCoef(iris)
UncertCoef(iris[,-5])
tbl_uncertainty_test <- function(d,handle.na=TRUE,...){
d <- dplyr::select(d, where(is.factor))
a <- assoc_tibble(d, measure_type="uncertainty")
a$measure <- mapply(function(x,y) DescTools::UncertCoef(d[[x]],d[[y]],...), a$x,a$y)
a
}
tbl_uncertainty_test(iris)
library(acepack)
?ace
x <- iris$Sepal.Length
y <- iris$Sepal.Width
ace(x,y)
ace(x,y)z <-
z <- ace(x,y)
z$rsq
sqrt(z$rsq)
cor(z$tx,z$ty
cor(z$tx,z$ty)
x <- iris$Petal.Length
z <- ace(x,y)
sqrt(z$rsq)
cor(z$tx,z$ty)
document()
check()
check()
check()
check()
library(corVis)
?assoc_tibble
?tbl_chi
?tbl_mine
show_assoc(iris,"Sepal.Length","Petal.Length","Species")
show_assoc <- function(d, x, y, by = NULL){
if ( is.numeric(d[[x]]) & is.numeric(d[[y]]) ) {
p <- ggplot2::ggplot(data=d) +
ggplot2::geom_point(ggplot2::aes(x = .data[[x]], y = .data[[y]])) + xlab(x) + ylab(y) +
{if(!is.null(by)) ggplot2::facet_wrap(~.data[[by]])}
} else if ( is.factor(d[[x]]) & is.factor(d[[y]]) ) {
p <- ggplot2::ggplot(data=d) +
#ggmosaic::geom_mosaic(ggplot2::aes(x = ggmosaic::product(.data[[x]], .data[[y]]), fill= .data[[x]] )) +
ggplot2::geom_bar(ggplot2::aes(x= .data[[x]], fill= .data[[y]]), position = "dodge") +
xlab(x) + ylab(y) + {if(!is.null(by)) ggplot2::facet_wrap(~.data[[by]])}
} else {
p <- ggplot2::ggplot(data=d) +
ggplot2::geom_boxplot(ggplot2::aes(x =.data[[x]], y =.data[[y]]) ) + xlab(x) +
ylab(y) + {if(!is.null(by)) ggplot2::facet_wrap(~.data[[by]])}
}
print(p)
}
show_assoc(d=penguins,"species","island")
show_assoc(d=penguins,"species","island","sex")
assoc_pengu
assoc_penguins <- calc_assoc(penguins)
server <- function(input, output,session) {
p <- association_heatmap(assoc_penguins)
output$plot <- renderPlot({p})
p1 <- eventReactive(input$plot_click,{
x <- input$plot_click$panelvar1
y <- input$plot_click$panelvar2
list(x=x,y=y)
})
assoc_p <- show_assoc(penguins,p1()$x,p1()$y)
output$scatter <- renderPlot({assoc_p})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
fluidRow(plotOutput("plot", click = "plot_click")),
fluidRow(
verbatimTextOutput("panel1"),
verbatimTextOutput("panel2")
),
fluidRow(plotOutput("scatter"))
)
server <- function(input, output,session) {
p <- association_heatmap(assoc_penguins)
output$plot <- renderPlot({p})
p1 <- eventReactive(input$plot_click,{
x <- input$plot_click$panelvar1
y <- input$plot_click$panelvar2
list(x=x,y=y)
})
assoc_p <- show_assoc(penguins,p1()$x,p1()$y)
output$scatter <- renderPlot({assoc_p})
}
shinyApp(ui, server)
server <- function(input, output,session) {
p <- association_heatmap(assoc_penguins)
output$plot <- renderPlot({p})
p1 <- eventReactive(input$plot_click,{
x <- input$plot_click$panelvar1
y <- input$plot_click$panelvar2
list(x=x,y=y)
})
output$scatter <- renderPlot({
assoc_p <- show_assoc(penguins,p1()$x,p1()$y)
assoc_p})
}
shinyApp(ui, server)
install.packages("zenplots")
library(zenplots)
install.packages("graph")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("graph")
library(graph)
library(zenplots)
?de_elect
df <- penguins
pearson_penguins <- tbl_cor(df,method = "pearson")
spearman_penguins <- tbl_cor(df, method = "spearman")
distance_penguins <- tbl_dcor(df)
mic_penguins <- tbl_mine(df)
compare_assoc_penguins <- rbind(pearson_penguins, spearman_penguins, distance_penguins, mic_penguins)
compare_assoc_penguins$measure <- abs(compare_assoc_penguins$measure)
compare_assoc_penguins$measure_type <- factor(compare_assoc_penguins$measure_type,levels =c("mic","dcor","pearson","spearman"))
pairwise_1d_compare(compare_assoc_penguins)
compare_assoc_penguins_wide <- pivot_wider(compare_assoc_penguins,1:2,names_from = measure_type,
values_from = measure )
a <- HDoutliers(iris[,-5])
a
a <- HDoutliers(iris[,1:3])
a
a <- HDoutliers(iris[,1:2])
a
HDoutliers::plotHDoutliers(iris[,1:2])
df <- penguins
pearson_penguins <- tbl_cor(df,method = "pearson")
spearman_penguins <- tbl_cor(df, method = "spearman")
distance_penguins <- tbl_dcor(df)
mic_penguins <- tbl_mine(df)
compare_assoc_penguins <- rbind(pearson_penguins, spearman_penguins, distance_penguins, mic_penguins)
compare_assoc_penguins$measure <- abs(compare_assoc_penguins$measure)
compare_assoc_penguins$measure_type <- factor(compare_assoc_penguins$measure_type,levels =c("mic","dcor","pearson","spearman"))
compare_assoc_penguins_wide <- pivot_wider(compare_assoc_penguins,1:2,names_from = measure_type,
values_from = measure )
outliers_stray <- find_HDoutliers(compare_assoc_penguins_wide[,3:6],0.15)
?find_HDoutliers
compare_assoc_penguins_wide
outliers_stray <- find_HDoutliers(compare_assoc_penguins_wide[,3:6],k=5,0.15)
outliers_stray
penguins_wide_outliers <- (compare_assoc_penguins_wide[,3:6])
penguins_wide_outliers
compare_assoc_penguins_wide$out_score <- outliers_stray$out_scores
compare_assoc_penguins_wide <- compare_assoc_penguins_wide %>%
arrange(desc(out_score))
compare_assoc_penguins_wide <- pivot_wider(compare_assoc_penguins,1:2,names_from = measure_type,
values_from = measure )
outliers_stray <- find_HDoutliers(compare_assoc_penguins_wide[,3:6],k=5,0.15)
outliers_stray
penguins_wide_outliers <- (compare_assoc_penguins_wide[,3:6])
penguins_wide_outliers$out <- ifelse(outliers_stray$out_scores>0.7,"out","nout")
compare_assoc_penguins_wide$out_score <- outliers_stray$out_scores
compare_assoc_penguins_wide_rank <- compare_assoc_penguins_wide %>%
arrange(desc(out_score))
compare_assoc_penguins_wide_rank
zenplot(penguins)
?mtcars
df <- mtcars
pearson <- tbl_cor(df,method = "pearson")
spearman <- tbl_cor(df, method = "spearman")
distance <- tbl_dcor(df)
mic <- tbl_mine(df)
compare_assoc <- rbind(pearson, spearman, distance, mic)
compare_assoc$measure <- abs(compare_assoc$measure)
compare_assoc$measure_type <- factor(compare_assoc$measure_type,levels =c("mic","dcor","pearson","spearman"))
pairwise_1d_compare(compare_assoc)
compare_assoc$measure_type <- factor(compare_assoc$measure_type,levels =c("mic","dcor","pearson","spearman"))
pairwise_1d_compare(compare_assoc)
```{r}
compare_assoc_wide <- pivot_wider(compare_assoc,1:2,names_from = measure_type,
values_from = measure )
library(stray)
outliers_stray <- find_HDoutliers(compare_assoc_wide[,3:6],0.15)
outliers_stray
wide_outliers <- (compare_assoc_wide[,3:6])
wide_outliers$out <- ifelse(outliers_stray$out_scores>0.7,"out","nout")
ggparcoord(wide_outliers,columns = 1:4,groupColumn = "out",scale = "globalminmax")
wide_outliers$out <- ifelse(outliers_stray$out_scores>0.15,"out","nout")
ggparcoord(wide_outliers,columns = 1:4,groupColumn = "out",scale = "globalminmax")
compare_assoc_wide$out_score <- outliers_stray$out_scores
compare_assoc_wide_rank <- compare_assoc_wide %>%
arrange(desc(out_score))
compare_assoc_wide_rank
zenplot(mtcars)
top10_var_pairs <- unique(c(unique(compare_assoc_wide_rank$x[1:10]),
unique(compare_assoc_wide_rank$y[1:10])))
zenplot(mtcars[,top10_var_pairs])
df <- de_elect
library(zenplots)
df <- de_elect
data("de_elect")
df <- de_elect
pearson <- tbl_cor(df,method = "pearson")
spearman <- tbl_cor(df, method = "spearman")
distance <- tbl_dcor(df)
mic <- tbl_mine(df)
compare_assoc <- rbind(pearson, spearman, distance, mic)
compare_assoc$measure <- abs(compare_assoc$measure)
compare_assoc$measure_type <- factor(compare_assoc$measure_type,levels =c("mic","dcor","pearson","spearman"))
pairwise_1d_compare(compare_assoc)
compare_assoc_wide <- pivot_wider(compare_assoc,1:2,names_from = measure_type,
values_from = measure )
#outliers <- HDoutliers(scag_measures_long[,3:6])
#outliers
#ggpairs(compare_assoc_steel_wide[,3:6])
library(stray)
outliers_stray <- find_HDoutliers(compare_assoc_wide[,3:6],0.15)
outliers_stray
wide_outliers <- (compare_assoc_wide[,3:6])
wide_outliers$out <- ifelse(outliers_stray$out_scores>0.15,"out","nout")
ggparcoord(wide_outliers,columns = 1:4,groupColumn = "out",scale = "globalminmax")
library(zenplots)
data("de_elect")
df <- mtcars
pearson <- tbl_cor(df,method = "pearson")
spearman <- tbl_cor(df, method = "spearman")
distance <- tbl_dcor(df)
mic <- tbl_mine(df)
compare_assoc <- rbind(pearson, spearman, distance, mic)
compare_assoc$measure <- abs(compare_assoc$measure)
compare_assoc$measure_type <- factor(compare_assoc$measure_type,levels =c("mic","dcor","pearson","spearman"))
#pairwise_1d_compare(compare_assoc)
compare_assoc_wide <- pivot_wider(compare_assoc,1:2,names_from = measure_type,
values_from = measure )
#outliers <- HDoutliers(scag_measures_long[,3:6])
#outliers
#ggpairs(compare_assoc_steel_wide[,3:6])
library(stray)
outliers_stray <- find_HDoutliers(compare_assoc_wide[,3:6],0.15)
outliers_stray
wide_outliers <- (compare_assoc_wide[,3:6])
wide_outliers$out <- ifelse(outliers_stray$out_scores>0.15,"out","nout")
ggparcoord(wide_outliers,columns = 1:4,groupColumn = "out",scale = "globalminmax")
compare_assoc_wide$out_score <- outliers_stray$out_scores
compare_assoc_wide_rank <- compare_assoc_wide %>%
arrange(desc(out_score))
compare_assoc_wide_rank
library(zenplots)
top10_var_pairs <- unique(c(unique(compare_assoc_wide_rank$x[1:10]),
unique(compare_assoc_wide_rank$y[1:10])))
zenplot(mtcars[,top10_var_pairs])
shinyApp(ui, server)
shinyApp(ui, server)
nrow(mtcars)
df <- MASS::Boston
pearson <- tbl_cor(df,method = "pearson")
spearman <- tbl_cor(df, method = "spearman")
distance <- tbl_dcor(df)
mic <- tbl_mine(df)
compare_assoc <- rbind(pearson, spearman, distance, mic)
compare_assoc$measure <- abs(compare_assoc$measure)
compare_assoc$measure_type <- factor(compare_assoc$measure_type,levels =c("mic","dcor","pearson","spearman"))
compare_assoc_wide <- pivot_wider(compare_assoc,1:2,names_from = measure_type,
values_from = measure )
outliers_stray <- find_HDoutliers(compare_assoc_wide[,3:6],0.15)
outliers_stray
outliers_stray <- find_HDoutliers(compare_assoc_wide[,3:6],0.2)
outliers_stray
outliers_stray <- find_HDoutliers(compare_assoc_wide[,3:6],0.3)
outliers_stray
outliers_stray <- find_HDoutliers(compare_assoc_wide[,3:6],0.4)
outliers_stray
compare_assoc_wide
outliers_stray <- find_HDoutliers(compare_assoc_wide[,3:6])
outliers_stray
outliers <- HDoutliers(scag_measures_long[,3:6])
outliers
wide_outliers <- (compare_assoc_wide[,3:6])
wide_outliers$out <- ifelse(outliers_stray$out_scores>0.15,"out","nout")
ggparcoord(wide_outliers,columns = 1:4,groupColumn = "out",scale = "globalminmax")
compare_assoc_wide$out_score <- outliers_stray$out_scores
compare_assoc_wide_rank <- compare_assoc_wide %>%
arrange(desc(out_score))
compare_assoc_wide_rank
top10_var_pairs <- unique(c(unique(compare_assoc_wide_rank$x[1:10]),
unique(compare_assoc_wide_rank$y[1:10])))
zenplot(mtcars[,top10_var_pairs])
zenplot(df[,top10_var_pairs])
dim(df)
library(minerva)
?mine
#data("de_elect")
df <- MASS::Boston
pearson <- tbl_cor(df,method = "pearson")
spearman <- tbl_cor(df, method = "spearman")
kendall <- tbl_cor(df, method = "kendall")
distance <- tbl_dcor(df)
mic <- tbl_mine(df)
ace <- tbl_ace(df)
compare_assoc <- rbind(pearson, spearman, kendall, distance, mic, ace)
compare_assoc$measure <- abs(compare_assoc$measure)
compare_assoc$measure_type <- factor(compare_assoc$measure_type,levels =c("mic","dcor","pearson","spearman","kendall","ace"))
compare_assoc_wide <- pivot_wider(compare_assoc,1:2,names_from = measure_type,
values_from = measure )
outliers <- HDoutliers(scag_measures_long[,3:6])
outliers
library(OutliersO3)
?`OutliersO3-package`
compare_assoc_wide <- pivot_wider(compare_assoc,1:2,names_from = measure_type,
values_from = measure )
outliers <- HDoutliers(compare_assoc_wide[,3:6])
outliers
oulier_prep <- O3prep(compare_assoc_wide)
oulier_prep <- O3prep(compare_assoc_wide[,3:6])
O3plotT(oulier_prep)
outliers <- HDoutliers(compare_assoc_wide[,3:8])
outliers
oulier_prep <- O3prep(compare_assoc_wide[,3:8])
O3plotT(oulier_prep)
compare_assoc_wide[77,]
ggplot(data=df) + geom_point(aes(x=tax,y=rad))
compare_assoc_wide[1,]
ggplot(data=df) + geom_point(aes(x=zn,y=crim))
O3plotM(oulier_prep)
df <- MASS::Boston
pearson <- tbl_cor(df,method = "pearson")
spearman <- tbl_cor(df, method = "spearman")
kendall <- tbl_cor(df, method = "kendall")
distance <- tbl_dcor(df)
mic <- tbl_mine(df)
ace <- tbl_ace(df)
compare_assoc <- rbind(pearson, spearman, kendall, distance, mic, ace)
compare_assoc$measure <- abs(compare_assoc$measure)
compare_assoc$measure_type <- factor(compare_assoc$measure_type,levels =c("mic","dcor","pearson","spearman","kendall","ace"))
compare_assoc_wide <- pivot_wider(compare_assoc,1:2,names_from = measure_type,
values_from = measure )
outlier_prep <- O3prep(compare_assoc_wide[,3:8])
O3plotT(outlier_prep)
compare_assoc_wide[1,]
compare_assoc_wide[33,]
compare_assoc_wide[77,]
ggplot(data=df) + geom_point(aes(x=zn,y=crim)) # case 1
ggplot(data=df) + geom_point(aes(x=ptratio,y=indus)) # case 33
?MASS::Boston
outliers_stray <- find_HDoutliers(compare_assoc_wide[,3:8])
outliers_stray
wide_outliers <- (compare_assoc_wide[,3:6])
wide_outliers <- (compare_assoc_wide[,3:8])
wide_outliers$out <- ifelse(outliers_stray$out_scores>0.15,"out","nout")
ggparcoord(wide_outliers,columns = 1:4,groupColumn = "out",scale = "globalminmax")
wide_outliers$out <- ifelse(outliers_stray$out_scores>0.2,"out","nout")
ggparcoord(wide_outliers,columns = 1:4,groupColumn = "out",scale = "globalminmax")
compare_assoc_wide$out_score <- outliers_stray$out_scores
compare_assoc_wide_rank <- compare_assoc_wide %>%
arrange(desc(out_score))
compare_assoc_wide_rank
top10_var_pairs <- unique(c(unique(compare_assoc_wide_rank$x[1:10]),
unique(compare_assoc_wide_rank$y[1:10])))
top10_var_pairs
names(Df)
names(df)
df_new <- df[,top10_var_pairs]
path <- c(1,4,3,10,6,8,1,7,3,2,9,11,5)
zenplot(df_new,path)
data(olive, package = "zenplots")
oliveAcids <- olive[, !names(olive) %in% c("Area", "Region")]
path <- c(1,2,3,1,4,2,5,1,6,2,7,1,8,2,3,4,5,3,6,4,7,3,8,4,5,6,7,5,8,6,7,8)
turns <- c("l",
"d","d","r","r","d","d","r","r","u","u","r","r","u","u","r","r",
"u","u","l","l","u","u","l","l","u","u","l","l","d","d","l","l",
"u","u","l","l","d","d","l","l","d","d","l","l","d","d","r","r",
"d","d","r","r","d","d","r","r","d","d","r","r","d","d")
library(ggplot2) # for ggplot2-based 2d plots
stopifnot(packageVersion("ggplot2") >= "2.2.1") # need 2.2.1 or higher
ggplot2d <- function(zargs) {
r <- extract_2d(zargs)
num2d <- zargs$num/2
df <- data.frame(x = unlist(r$x), y = unlist(r$y))
p <- ggplot() +
geom_point(data = df, aes(x = x, y = y), cex = 0.1) +
theme(axis.line = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
if(num2d == 1) p <- p +
theme(panel.background = element_rect(fill = 'royalblue3'))
if(num2d == (length(zargs$turns)-1)/2) p <- p +
theme(panel.background = element_rect(fill = 'maroon3'))
ggplot_gtable(ggplot_build(p))
}
zenplot(as.matrix(oliveAcids)[,path], turns = turns, pkg = "grid",
plot2d = function(zargs) ggplot2d(zargs))
names(oliveAcids)
turns <- c("d","r","d","r","d","r","d","r","d","l","l")
zenplot(df_new,path=path,turns = turns)
turns <- c("d","r","d","r","d","r","d","r","d","l","l",
"d","r","d","r","d","r","d","r","d","l")
zenplot(df_new,path=path,turns = turns)
zenplot(df_new,path=path,turns = turns,pkg="grid",plot2d = function(zargs) ggplot2d(zargs))
outlier_prep <- O3prep(compare_assoc_wide[,3:8])
O3plotT(outlier_prep)
O3plot <- O3plotT(outlier_prep)
