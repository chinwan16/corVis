plot_assoc_matrix_test <- function(lassoc, uassoc=NULL, 
                                   glyph = c("square","circle"),
                              var_order="default",
                              limits=c(-1,1)){
  
  for (i in 1: length(lassoc$x)) lassoc$x[i] <- 
      paste(unlist(stringi::stri_extract_all_regex(lassoc$x[i], '.{1,6}')),collapse="\n")
  
  for (i in 1: length(lassoc$x)) lassoc$y[i] <- 
      paste(unlist(stringi::stri_extract_all_regex(lassoc$y[i], '.{1,6}')),collapse="\n")
  
  glyph = match.arg(glyph)
  # vartypes <- attr(lassoc,"vartypes")
  
  if(class(lassoc)[1]=="pairwise"){
    group_var <- NULL
  } else if(class(lassoc)[1]=="cond_pairwise"){
    group_var <- "by"
  } else group_var <- "measure_type"
  
  if( "default" %in% var_order){
    var_order <- order_assoc_var(lassoc,group_var)
  }else{
    if (length(unique(c(lassoc$y, lassoc$x))) != length(var_order))
      stop("Length of var_order should be same as number of variables")
    var_order <- var_order
  }
  
  if(!is.null(group_var)){
    lollipop_order <- order_assoc_lollipop(lassoc,group_var)
  }
  
  if (is.null(uassoc))
    assoc <- sym_assoc(lassoc) else {
      names(uassoc)[1:2] <- names(uassoc)[2:1]
      assoc <-rbind(lassoc, uassoc)
    }
  
  if (is.null(limits)) {
    limits <- range(lassoc$measure, na.rm=TRUE)
    limits <- range(labeling::rpretty(limits[1], limits[2]))
  }
  
  
  assoc$x <- factor(assoc$x, levels=var_order)
  assoc$y <- factor(assoc$y, levels=var_order)
  
  if(!is.null(group_var))
    
    if(group_var=="measure_type"){
      assoc[[group_var]] <- factor(assoc[[group_var]], levels = lollipop_order)
    } else assoc[[group_var]] <- factor(assoc[[group_var]], levels = c(lollipop_order,"overall"))
  
  if ("by" %in% names(assoc)){
    overall <- dplyr::filter(assoc, by =="overall")
    assoc <- dplyr::filter(assoc, by != "overall")
  }
  else overall <- NULL
  
  diag_df <- assoc[1:length(var_order),]
  diag_df$x <- diag_df$y <- var_order
  diag_df$measure <- NA
  diag_df$intercept <- NA
  diag_df$text <- diag_df$x
  # diag_df$var_type <- vartypes[var_order]
  assoc$text <- NA
  assoc$intercept <- 0
  # assoc$var_type <- NA
  assoc <- rbind(assoc, diag_df)
  
  assoc$abs_measure <- abs(assoc$measure)
  
  p <- ggplot2::ggplot(assoc) +
    #ggplot2::geom_rect(mapping=ggplot2::aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf),
    #data=simpson[,1:2],
    #fill = 'red', alpha = 0.1) +
    ggplot2::facet_grid(ggplot2::vars(.data$x), ggplot2::vars(.data$y)) +
    ggplot2::geom_rect(ggplot2::aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf),
                       color="grey",alpha=0) +
    #ggplot2::scale_color_hue(guide = "none") +
    ggplot2::theme(axis.text.x = ggplot2::element_blank(),
                   axis.text = ggplot2::element_text(size = 5),
                   panel.background = ggplot2::element_rect(fill="white"),
                   panel.grid.major = ggplot2::element_blank(),
                   panel.grid.minor = ggplot2::element_blank(),
                   panel.spacing = ggplot2::unit(0,'lines'),
                   axis.ticks.x = ggplot2::element_blank(),
                   legend.position = "bottom",
                   axis.title.x = ggplot2::element_blank(),
                   strip.background = ggplot2::element_blank(),
                   strip.text.y = ggplot2::element_blank(),
                   strip.text.x = ggplot2::element_blank(),
                   axis.title.y = ggplot2::element_blank(),
                   aspect.ratio = 1)
  
  if(is.null(group_var)){
    
    p <- p +
      ggplot2::geom_text(ggplot2::aes(x=0,y=0,label=.data$text),size=3) +
      ggplot2::scale_fill_gradient2(low="blue", mid="white", high="brown",na.value=NA,limits=limits) +
      ggplot2::theme(axis.text.y = ggplot2::element_blank(),
                     axis.ticks.y = ggplot2::element_blank())
    
    if (glyph=="square"){
      p <- p+
        ggplot2::coord_cartesian(xlim = c(-0.5,0.5), ylim = c(-0.5,0.5)) +
        ggplot2::geom_rect(ggplot2::aes(xmin = -sqrt(abs(.data[["measure"]]))/2,
                                        xmax = sqrt(abs(.data[["measure"]]))/2,
                                        ymin = -sqrt(abs(.data[["measure"]]))/2,
                                        ymax = sqrt(abs(.data[["measure"]]))/2,
                                        fill = .data[["measure"]]),na.rm = TRUE)
    } else {
      p <- p +
        ggforce::geom_circle(color=NA,ggplot2::aes(x0 = 0, y0 = 0, r = sqrt(abs(.data[["measure"]])/pi),
                                                   fill = .data[["measure"]]))
      
    }
  } else if (isTRUE(group_var %in% names(assoc))) {
    
    if (!is.null(overall))
      p <- p+ ggplot2::geom_hline(data=overall,ggplot2::aes(yintercept=.data$measure),color="pink")
    
    p <- p + 
      ggplot2::geom_segment(ggplot2::aes(x=.data[[group_var]],xend=.data[[group_var]], color=.data[[group_var]], y=0, yend=.data$measure)) +
      ggplot2::geom_point(ggplot2::aes(x=.data[[group_var]],y=.data$measure,group=.data[[group_var]],color=.data[[group_var]]), size=1) +
      ggplot2::geom_text(ggplot2::aes(x= length(levels(.data[[group_var]]))/2+0.5,y= mean(limits),label=.data$text),size=3) +
      ggplot2::geom_hline(ggplot2::aes(yintercept=.data$intercept), size=0.5) +
      ggplot2::scale_y_continuous(limits=limits) +
      ggplot2::theme(panel.spacing = ggplot2::unit(0.05, "lines")) 
    
    by_var <- attr(lassoc,"by_var")
    p <- p+ {if(group_var=="by") ggplot2::labs(color = by_var)} # ch comments update
    
  }
  
  suppressWarnings(p)
}


################################################################


for (i in 1: length(assoc$x)) assoc$x[i] <- 
    paste(unlist(stringi::stri_extract_all_regex(assoc$x[i], '.{1,6}')),collapse="\n")

for (i in 1: length(assoc$x)) assoc$y[i] <- 
    paste(unlist(stringi::stri_extract_all_regex(assoc$y[i], '.{1,6}')),collapse="\n")