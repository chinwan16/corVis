calc_assoc_test  <- function(d,
                        by=NULL,
                        types=default_assoc(),
                        include.overall=TRUE,
                        handle.na=TRUE,
                        coerce_types=NULL){
  
  if (!is.null(coerce_types)){
    nums <- coerce_types$numeric
    d[,nums] <- sapply(d[,nums], as.numeric)
    ords <- coerce_types$ordinal
    d[,ords] <- as.data.frame(lapply(d[,ords], as.ordered))
    facs <- coerce_types$factor
    d[,facs] <- as.data.frame(lapply(d[,facs], factor))
  }
  
  if(is.null(by)) {
    types1 <- types
    names(types1) <- names(types)[c(1,3,2,4)]
    types <- rbind(types,types1)
    
    
    vartypes <- sapply(names(d), function(u)
      if (is.numeric(d[[u]])) "numeric"
      else if (is.ordered(d[[u]])) "ordered"
      else if (is.factor(d[[u]])) "factor"
      else stop("variables must be either numeric, ordered or nominal factor"))
    
    lookup <- function(xtype,ytype){
      entry <-dplyr::filter(types, .data$typeX==xtype, .data$typeY==ytype)
      if (nrow(entry)==0){
        if(xtype == "numeric" | ytype == "numeric")
          entry <-dplyr::filter(types, .data$typeX=="factor", .data$typeY=="numeric")
        else entry <-dplyr::filter(types, .data$typeX=="factor", .data$typeY=="factor")
      }
      list(funName = get(entry$funName[1]), argList = entry$argList[[1]])
    }
    utypes <- unique(vartypes)
    
    measures <- vector("list", length(utypes))
    for (i in seq(along=utypes)){
      entry <- lookup(utypes[i], utypes[i])
      dsub <- d[vartypes==utypes[i]]
      if (ncol(dsub)>1)
        measures[[i]] <- do.call(entry$funName, c(list(dsub, handle.na=handle.na), entry$argList))
    }
    
    pcor <- assoc_tibble(d)
    class(pcor) <- class(pcor)[-1]
    
    for (m in measures){
      if (!is.null(m)){
        m <- sym_assoc(m)
        class(m) <- class(pcor)[-1]
        w <- match(paste(m$x,m$y), paste( pcor$x, pcor$y))
        m <- m[!is.na(w),]
        pcor <- dplyr::rows_patch(pcor, m, by = c("x","y"))
      }
    }
    
    if (any(is.na(pcor$measure))){
      for (i in 1:nrow(pcor))
        if (is.na(pcor$measure[i])){
          entry <- lookup(vartypes[pcor$x[i]],vartypes[pcor$y[i]])
          dsub <- d[, c(pcor$x[i], pcor$y[i])]
          m <- do.call(entry$funName, c(list(dsub, handle.na=handle.na), entry$argList))
          pcor$measure[i] <- m$measure[1]
          pcor$measure_type[i] <- m$measure_type[1]
          pcor$pair_type[i] <- m$pair_type[1]
        }
    }
    class(pcor)<-append("pairwise", class(pcor))
    pcor
  } else {
    
    if (!(by %in% names(d))) stop("by variable not present in data")
    result <- d |>
      dplyr::rename(by=by) |>
      dplyr::group_by(by) |>
      dplyr::group_modify(function(x,y) calc_assoc(x, types=types,handle.na=handle.na)) |>
      dplyr::ungroup() |>
      dplyr::relocate(by, .after=.data$measure_type)
    if (include.overall){
      overall <- d |>
        dplyr::select(-dplyr::all_of(by)) |>
        calc_assoc(types=types,handle.na=handle.na) |>
        dplyr::mutate(by = "overall")
      result <- rbind(result, overall)
    }
    class(result)<-append("cond_pairwise", class(result))
    attr(result,"by_var") <- by
    result
    
  }
  
}


################################################################################

calc_assoc_all_test <- function(d,measures=c("pearson","spearman","kendall","cancor","nmi",
                                        "dcor", "mic", "ace", "polycor", "tau_b",
                                        "uncertainty","gkTau", "gkGamma", "chi"),
                           handle.na=T) {
  
  pearson = NULL; spearman = NULL; kendall = NULL; cancor = NULL
  nmi = NULL; dcor = NULL; mic = NULL;  ace = NULL;polycor = NULL; tau_b = NULL
  uncertainty = NULL; gkTau = NULL; gkGamma = NULL; chi = NULL
  
  if ("pearson" %in% measures) {
    
    pearson <- tbl_cor(d,handle.na = handle.na)
    
  }
  
  if ("spearman" %in% measures) {
    
    spearman <- tbl_cor(d,handle.na = handle.na,"spearman")
    
  }
  
  if ("kendall" %in% measures) {
    
    kendall <- tbl_cor(d,handle.na = handle.na,"kendall")
    
  }
  
  if ("cancor" %in% measures) {
    
    cancor <- tbl_cancor(d,handle.na = handle.na)
    
  }
  
  if ("nmi" %in% measures) {
    
    nmi <- tbl_nmi(d,handle.na = handle.na)
    
  }
  
  if ("dcor" %in% measures) {
    
    dcor <- tbl_dcor(d,handle.na = handle.na)
    
  }
  
  if ("mic" %in% measures) {
    
    mic <- tbl_mine(d,handle.na = handle.na)
    
  }
  
  if ("ace" %in% measures) {
    
    ace <- tbl_ace(d,handle.na = handle.na)
    
  }
  
  if ("polycor" %in% measures) {
    
    polycor <- tbl_polycor(d,handle.na = handle.na)
    
  }
  
  if ("tau_b" %in% measures) {
    
    tau_b <- tbl_tau(d)
    
  }
  
  if ("uncertainty" %in% measures) {
    
    uncertainty <- tbl_uncertainty(d,handle.na = handle.na)
    
  }
  
  if ("gkTau" %in% measures) {
    
    gkTau <- tbl_gkTau(d, handle.na = handle.na)
    
  }
  
  if ("gkGamma" %in% measures) {
    
    gkGamma <- tbl_gkGamma(d, handle.na = handle.na)
    
  }
  
  if ("chi" %in% measures) {
    
    chi <- tbl_chi(d, handle.na = handle.na)
    
  }
  
  assoc <- rbind(pearson, spearman, kendall, cancor, nmi, dcor, mic, ace, polycor, tau_b,
                 uncertainty, gkTau, gkGamma, chi)
  
  
  class(assoc)<-append("multi_pairwise", class(assoc))
  return(assoc)
  
}


